// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthProof.proto

#ifndef PROTOBUF_AuthProof_2eproto__INCLUDED
#define PROTOBUF_AuthProof_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
class AuthProof;
class AuthProofDefaultTypeInternal;
extern AuthProofDefaultTypeInternal _AuthProof_default_instance_;

namespace protobuf_AuthProof_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_AuthProof_2eproto

// ===================================================================

class AuthProof : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:AuthProof) */ {
 public:
  AuthProof();
  virtual ~AuthProof();

  AuthProof(const AuthProof& from);

  inline AuthProof& operator=(const AuthProof& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthProof(AuthProof&& from) noexcept
    : AuthProof() {
    *this = ::std::move(from);
  }

  inline AuthProof& operator=(AuthProof&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AuthProof& default_instance();

  static inline const AuthProof* internal_default_instance() {
    return reinterpret_cast<const AuthProof*>(
               &_AuthProof_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AuthProof* other);
  friend void swap(AuthProof& a, AuthProof& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthProof* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthProof* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AuthProof& from);
  void MergeFrom(const AuthProof& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthProof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string proof = 1;
  void clear_proof();
  static const int kProofFieldNumber = 1;
  const ::std::string& proof() const;
  void set_proof(const ::std::string& value);
  #if LANG_CXX11
  void set_proof(::std::string&& value);
  #endif
  void set_proof(const char* value);
  void set_proof(const char* value, size_t size);
  ::std::string* mutable_proof();
  ::std::string* release_proof();
  void set_allocated_proof(::std::string* proof);

  // string playerid = 4;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string original_playerid = 5;
  void clear_original_playerid();
  static const int kOriginalPlayeridFieldNumber = 5;
  const ::std::string& original_playerid() const;
  void set_original_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_original_playerid(::std::string&& value);
  #endif
  void set_original_playerid(const char* value);
  void set_original_playerid(const char* value, size_t size);
  ::std::string* mutable_original_playerid();
  ::std::string* release_original_playerid();
  void set_allocated_original_playerid(::std::string* original_playerid);

  // uint32 session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::uint32 session_id() const;
  void set_session_id(::google::protobuf::uint32 value);

  // uint32 required_capabilities = 3;
  void clear_required_capabilities();
  static const int kRequiredCapabilitiesFieldNumber = 3;
  ::google::protobuf::uint32 required_capabilities() const;
  void set_required_capabilities(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:AuthProof)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr proof_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr original_playerid_;
  ::google::protobuf::uint32 session_id_;
  ::google::protobuf::uint32 required_capabilities_;
  mutable int _cached_size_;
  friend struct protobuf_AuthProof_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthProof

// string proof = 1;
inline void AuthProof::clear_proof() {
  proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthProof::proof() const {
  // @@protoc_insertion_point(field_get:AuthProof.proof)
  return proof_.GetNoArena();
}
inline void AuthProof::set_proof(const ::std::string& value) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthProof.proof)
}
#if LANG_CXX11
inline void AuthProof::set_proof(::std::string&& value) {
  
  proof_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthProof.proof)
}
#endif
inline void AuthProof::set_proof(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthProof.proof)
}
inline void AuthProof::set_proof(const char* value, size_t size) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthProof.proof)
}
inline ::std::string* AuthProof::mutable_proof() {
  
  // @@protoc_insertion_point(field_mutable:AuthProof.proof)
  return proof_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthProof::release_proof() {
  // @@protoc_insertion_point(field_release:AuthProof.proof)
  
  return proof_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthProof::set_allocated_proof(::std::string* proof) {
  if (proof != NULL) {
    
  } else {
    
  }
  proof_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proof);
  // @@protoc_insertion_point(field_set_allocated:AuthProof.proof)
}

// uint32 session_id = 2;
inline void AuthProof::clear_session_id() {
  session_id_ = 0u;
}
inline ::google::protobuf::uint32 AuthProof::session_id() const {
  // @@protoc_insertion_point(field_get:AuthProof.session_id)
  return session_id_;
}
inline void AuthProof::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:AuthProof.session_id)
}

// uint32 required_capabilities = 3;
inline void AuthProof::clear_required_capabilities() {
  required_capabilities_ = 0u;
}
inline ::google::protobuf::uint32 AuthProof::required_capabilities() const {
  // @@protoc_insertion_point(field_get:AuthProof.required_capabilities)
  return required_capabilities_;
}
inline void AuthProof::set_required_capabilities(::google::protobuf::uint32 value) {
  
  required_capabilities_ = value;
  // @@protoc_insertion_point(field_set:AuthProof.required_capabilities)
}

// string playerid = 4;
inline void AuthProof::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthProof::playerid() const {
  // @@protoc_insertion_point(field_get:AuthProof.playerid)
  return playerid_.GetNoArena();
}
inline void AuthProof::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthProof.playerid)
}
#if LANG_CXX11
inline void AuthProof::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthProof.playerid)
}
#endif
inline void AuthProof::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthProof.playerid)
}
inline void AuthProof::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthProof.playerid)
}
inline ::std::string* AuthProof::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:AuthProof.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthProof::release_playerid() {
  // @@protoc_insertion_point(field_release:AuthProof.playerid)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthProof::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:AuthProof.playerid)
}

// string original_playerid = 5;
inline void AuthProof::clear_original_playerid() {
  original_playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthProof::original_playerid() const {
  // @@protoc_insertion_point(field_get:AuthProof.original_playerid)
  return original_playerid_.GetNoArena();
}
inline void AuthProof::set_original_playerid(const ::std::string& value) {
  
  original_playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthProof.original_playerid)
}
#if LANG_CXX11
inline void AuthProof::set_original_playerid(::std::string&& value) {
  
  original_playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthProof.original_playerid)
}
#endif
inline void AuthProof::set_original_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  original_playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthProof.original_playerid)
}
inline void AuthProof::set_original_playerid(const char* value, size_t size) {
  
  original_playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthProof.original_playerid)
}
inline ::std::string* AuthProof::mutable_original_playerid() {
  
  // @@protoc_insertion_point(field_mutable:AuthProof.original_playerid)
  return original_playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthProof::release_original_playerid() {
  // @@protoc_insertion_point(field_release:AuthProof.original_playerid)
  
  return original_playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthProof::set_allocated_original_playerid(::std::string* original_playerid) {
  if (original_playerid != NULL) {
    
  } else {
    
  }
  original_playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_playerid);
  // @@protoc_insertion_point(field_set_allocated:AuthProof.original_playerid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AuthProof_2eproto__INCLUDED
