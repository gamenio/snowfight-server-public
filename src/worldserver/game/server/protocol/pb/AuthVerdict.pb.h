// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthVerdict.proto

#ifndef PROTOBUF_AuthVerdict_2eproto__INCLUDED
#define PROTOBUF_AuthVerdict_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
class AuthVerdict;
class AuthVerdictDefaultTypeInternal;
extern AuthVerdictDefaultTypeInternal _AuthVerdict_default_instance_;

namespace protobuf_AuthVerdict_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_AuthVerdict_2eproto

enum AuthVerdict_AuthResult {
  AuthVerdict_AuthResult_AUTH_OK = 0,
  AuthVerdict_AuthResult_AUTH_FAILED = 1,
  AuthVerdict_AuthResult_AUTH_WAIT_QUEUE = 2,
  AuthVerdict_AuthResult_AUTH_SESSION_EXPIRED = 3,
  AuthVerdict_AuthResult_AuthVerdict_AuthResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AuthVerdict_AuthResult_AuthVerdict_AuthResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AuthVerdict_AuthResult_IsValid(int value);
const AuthVerdict_AuthResult AuthVerdict_AuthResult_AuthResult_MIN = AuthVerdict_AuthResult_AUTH_OK;
const AuthVerdict_AuthResult AuthVerdict_AuthResult_AuthResult_MAX = AuthVerdict_AuthResult_AUTH_SESSION_EXPIRED;
const int AuthVerdict_AuthResult_AuthResult_ARRAYSIZE = AuthVerdict_AuthResult_AuthResult_MAX + 1;

// ===================================================================

class AuthVerdict : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:AuthVerdict) */ {
 public:
  AuthVerdict();
  virtual ~AuthVerdict();

  AuthVerdict(const AuthVerdict& from);

  inline AuthVerdict& operator=(const AuthVerdict& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthVerdict(AuthVerdict&& from) noexcept
    : AuthVerdict() {
    *this = ::std::move(from);
  }

  inline AuthVerdict& operator=(AuthVerdict&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AuthVerdict& default_instance();

  static inline const AuthVerdict* internal_default_instance() {
    return reinterpret_cast<const AuthVerdict*>(
               &_AuthVerdict_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AuthVerdict* other);
  friend void swap(AuthVerdict& a, AuthVerdict& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthVerdict* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthVerdict* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AuthVerdict& from);
  void MergeFrom(const AuthVerdict& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthVerdict* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AuthVerdict_AuthResult AuthResult;
  static const AuthResult AUTH_OK =
    AuthVerdict_AuthResult_AUTH_OK;
  static const AuthResult AUTH_FAILED =
    AuthVerdict_AuthResult_AUTH_FAILED;
  static const AuthResult AUTH_WAIT_QUEUE =
    AuthVerdict_AuthResult_AUTH_WAIT_QUEUE;
  static const AuthResult AUTH_SESSION_EXPIRED =
    AuthVerdict_AuthResult_AUTH_SESSION_EXPIRED;
  static inline bool AuthResult_IsValid(int value) {
    return AuthVerdict_AuthResult_IsValid(value);
  }
  static const AuthResult AuthResult_MIN =
    AuthVerdict_AuthResult_AuthResult_MIN;
  static const AuthResult AuthResult_MAX =
    AuthVerdict_AuthResult_AuthResult_MAX;
  static const int AuthResult_ARRAYSIZE =
    AuthVerdict_AuthResult_AuthResult_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // .AuthVerdict.AuthResult result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::AuthVerdict_AuthResult result() const;
  void set_result(::AuthVerdict_AuthResult value);

  // int32 wait_pos = 2;
  void clear_wait_pos();
  static const int kWaitPosFieldNumber = 2;
  ::google::protobuf::int32 wait_pos() const;
  void set_wait_pos(::google::protobuf::int32 value);

  // int32 gm_level = 3;
  void clear_gm_level();
  static const int kGmLevelFieldNumber = 3;
  ::google::protobuf::int32 gm_level() const;
  void set_gm_level(::google::protobuf::int32 value);

  // uint32 session_id = 4;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 4;
  ::google::protobuf::uint32 session_id() const;
  void set_session_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:AuthVerdict)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int result_;
  ::google::protobuf::int32 wait_pos_;
  ::google::protobuf::int32 gm_level_;
  ::google::protobuf::uint32 session_id_;
  mutable int _cached_size_;
  friend struct protobuf_AuthVerdict_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthVerdict

// .AuthVerdict.AuthResult result = 1;
inline void AuthVerdict::clear_result() {
  result_ = 0;
}
inline ::AuthVerdict_AuthResult AuthVerdict::result() const {
  // @@protoc_insertion_point(field_get:AuthVerdict.result)
  return static_cast< ::AuthVerdict_AuthResult >(result_);
}
inline void AuthVerdict::set_result(::AuthVerdict_AuthResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:AuthVerdict.result)
}

// int32 wait_pos = 2;
inline void AuthVerdict::clear_wait_pos() {
  wait_pos_ = 0;
}
inline ::google::protobuf::int32 AuthVerdict::wait_pos() const {
  // @@protoc_insertion_point(field_get:AuthVerdict.wait_pos)
  return wait_pos_;
}
inline void AuthVerdict::set_wait_pos(::google::protobuf::int32 value) {
  
  wait_pos_ = value;
  // @@protoc_insertion_point(field_set:AuthVerdict.wait_pos)
}

// int32 gm_level = 3;
inline void AuthVerdict::clear_gm_level() {
  gm_level_ = 0;
}
inline ::google::protobuf::int32 AuthVerdict::gm_level() const {
  // @@protoc_insertion_point(field_get:AuthVerdict.gm_level)
  return gm_level_;
}
inline void AuthVerdict::set_gm_level(::google::protobuf::int32 value) {
  
  gm_level_ = value;
  // @@protoc_insertion_point(field_set:AuthVerdict.gm_level)
}

// uint32 session_id = 4;
inline void AuthVerdict::clear_session_id() {
  session_id_ = 0u;
}
inline ::google::protobuf::uint32 AuthVerdict::session_id() const {
  // @@protoc_insertion_point(field_get:AuthVerdict.session_id)
  return session_id_;
}
inline void AuthVerdict::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:AuthVerdict.session_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::AuthVerdict_AuthResult> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AuthVerdict_2eproto__INCLUDED
