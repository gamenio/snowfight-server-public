// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerStatusList.proto

#ifndef PROTOBUF_PlayerStatusList_2eproto__INCLUDED
#define PROTOBUF_PlayerStatusList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
class PlayerStatus;
class PlayerStatusDefaultTypeInternal;
extern PlayerStatusDefaultTypeInternal _PlayerStatus_default_instance_;
class PlayerStatusList;
class PlayerStatusListDefaultTypeInternal;
extern PlayerStatusListDefaultTypeInternal _PlayerStatusList_default_instance_;

namespace protobuf_PlayerStatusList_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_PlayerStatusList_2eproto

// ===================================================================

class PlayerStatus : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PlayerStatus) */ {
 public:
  PlayerStatus();
  virtual ~PlayerStatus();

  PlayerStatus(const PlayerStatus& from);

  inline PlayerStatus& operator=(const PlayerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerStatus(PlayerStatus&& from) noexcept
    : PlayerStatus() {
    *this = ::std::move(from);
  }

  inline PlayerStatus& operator=(PlayerStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PlayerStatus& default_instance();

  static inline const PlayerStatus* internal_default_instance() {
    return reinterpret_cast<const PlayerStatus*>(
               &_PlayerStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PlayerStatus* other);
  friend void swap(PlayerStatus& a, PlayerStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PlayerStatus& from);
  void MergeFrom(const PlayerStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string country = 8;
  void clear_country();
  static const int kCountryFieldNumber = 8;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // uint32 guid = 1;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::uint32 guid() const;
  void set_guid(::google::protobuf::uint32 value);

  // int32 latency = 3;
  void clear_latency();
  static const int kLatencyFieldNumber = 3;
  ::google::protobuf::int32 latency() const;
  void set_latency(::google::protobuf::int32 value);

  // int32 attack_total = 4;
  void clear_attack_total();
  static const int kAttackTotalFieldNumber = 4;
  ::google::protobuf::int32 attack_total() const;
  void set_attack_total(::google::protobuf::int32 value);

  // float viewport_width = 5;
  void clear_viewport_width();
  static const int kViewportWidthFieldNumber = 5;
  float viewport_width() const;
  void set_viewport_width(float value);

  // float viewport_height = 6;
  void clear_viewport_height();
  static const int kViewportHeightFieldNumber = 6;
  float viewport_height() const;
  void set_viewport_height(float value);

  // int32 lang = 7;
  void clear_lang();
  static const int kLangFieldNumber = 7;
  ::google::protobuf::int32 lang() const;
  void set_lang(::google::protobuf::int32 value);

  // uint32 gm_level = 9;
  void clear_gm_level();
  static const int kGmLevelFieldNumber = 9;
  ::google::protobuf::uint32 gm_level() const;
  void set_gm_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlayerStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::uint32 guid_;
  ::google::protobuf::int32 latency_;
  ::google::protobuf::int32 attack_total_;
  float viewport_width_;
  float viewport_height_;
  ::google::protobuf::int32 lang_;
  ::google::protobuf::uint32 gm_level_;
  mutable int _cached_size_;
  friend struct protobuf_PlayerStatusList_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerStatusList : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:PlayerStatusList) */ {
 public:
  PlayerStatusList();
  virtual ~PlayerStatusList();

  PlayerStatusList(const PlayerStatusList& from);

  inline PlayerStatusList& operator=(const PlayerStatusList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerStatusList(PlayerStatusList&& from) noexcept
    : PlayerStatusList() {
    *this = ::std::move(from);
  }

  inline PlayerStatusList& operator=(PlayerStatusList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PlayerStatusList& default_instance();

  static inline const PlayerStatusList* internal_default_instance() {
    return reinterpret_cast<const PlayerStatusList*>(
               &_PlayerStatusList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PlayerStatusList* other);
  friend void swap(PlayerStatusList& a, PlayerStatusList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerStatusList* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerStatusList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const PlayerStatusList& from);
  void MergeFrom(const PlayerStatusList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerStatusList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PlayerStatus result = 3;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const ::PlayerStatus& result(int index) const;
  ::PlayerStatus* mutable_result(int index);
  ::PlayerStatus* add_result();
  ::google::protobuf::RepeatedPtrField< ::PlayerStatus >*
      mutable_result();
  const ::google::protobuf::RepeatedPtrField< ::PlayerStatus >&
      result() const;

  // @@protoc_insertion_point(class_scope:PlayerStatusList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PlayerStatus > result_;
  mutable int _cached_size_;
  friend struct protobuf_PlayerStatusList_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerStatus

// uint32 guid = 1;
inline void PlayerStatus::clear_guid() {
  guid_ = 0u;
}
inline ::google::protobuf::uint32 PlayerStatus::guid() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.guid)
  return guid_;
}
inline void PlayerStatus::set_guid(::google::protobuf::uint32 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.guid)
}

// string name = 2;
inline void PlayerStatus::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerStatus::name() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.name)
  return name_.GetNoArena();
}
inline void PlayerStatus::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerStatus.name)
}
#if LANG_CXX11
inline void PlayerStatus::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerStatus.name)
}
#endif
inline void PlayerStatus::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerStatus.name)
}
inline void PlayerStatus::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerStatus.name)
}
inline ::std::string* PlayerStatus::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:PlayerStatus.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerStatus::release_name() {
  // @@protoc_insertion_point(field_release:PlayerStatus.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerStatus::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PlayerStatus.name)
}

// int32 latency = 3;
inline void PlayerStatus::clear_latency() {
  latency_ = 0;
}
inline ::google::protobuf::int32 PlayerStatus::latency() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.latency)
  return latency_;
}
inline void PlayerStatus::set_latency(::google::protobuf::int32 value) {
  
  latency_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.latency)
}

// int32 attack_total = 4;
inline void PlayerStatus::clear_attack_total() {
  attack_total_ = 0;
}
inline ::google::protobuf::int32 PlayerStatus::attack_total() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.attack_total)
  return attack_total_;
}
inline void PlayerStatus::set_attack_total(::google::protobuf::int32 value) {
  
  attack_total_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.attack_total)
}

// float viewport_width = 5;
inline void PlayerStatus::clear_viewport_width() {
  viewport_width_ = 0;
}
inline float PlayerStatus::viewport_width() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.viewport_width)
  return viewport_width_;
}
inline void PlayerStatus::set_viewport_width(float value) {
  
  viewport_width_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.viewport_width)
}

// float viewport_height = 6;
inline void PlayerStatus::clear_viewport_height() {
  viewport_height_ = 0;
}
inline float PlayerStatus::viewport_height() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.viewport_height)
  return viewport_height_;
}
inline void PlayerStatus::set_viewport_height(float value) {
  
  viewport_height_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.viewport_height)
}

// int32 lang = 7;
inline void PlayerStatus::clear_lang() {
  lang_ = 0;
}
inline ::google::protobuf::int32 PlayerStatus::lang() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.lang)
  return lang_;
}
inline void PlayerStatus::set_lang(::google::protobuf::int32 value) {
  
  lang_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.lang)
}

// string country = 8;
inline void PlayerStatus::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerStatus::country() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.country)
  return country_.GetNoArena();
}
inline void PlayerStatus::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerStatus.country)
}
#if LANG_CXX11
inline void PlayerStatus::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerStatus.country)
}
#endif
inline void PlayerStatus::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerStatus.country)
}
inline void PlayerStatus::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerStatus.country)
}
inline ::std::string* PlayerStatus::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:PlayerStatus.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerStatus::release_country() {
  // @@protoc_insertion_point(field_release:PlayerStatus.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerStatus::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:PlayerStatus.country)
}

// uint32 gm_level = 9;
inline void PlayerStatus::clear_gm_level() {
  gm_level_ = 0u;
}
inline ::google::protobuf::uint32 PlayerStatus::gm_level() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.gm_level)
  return gm_level_;
}
inline void PlayerStatus::set_gm_level(::google::protobuf::uint32 value) {
  
  gm_level_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.gm_level)
}

// -------------------------------------------------------------------

// PlayerStatusList

// repeated .PlayerStatus result = 3;
inline int PlayerStatusList::result_size() const {
  return result_.size();
}
inline void PlayerStatusList::clear_result() {
  result_.Clear();
}
inline const ::PlayerStatus& PlayerStatusList::result(int index) const {
  // @@protoc_insertion_point(field_get:PlayerStatusList.result)
  return result_.Get(index);
}
inline ::PlayerStatus* PlayerStatusList::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:PlayerStatusList.result)
  return result_.Mutable(index);
}
inline ::PlayerStatus* PlayerStatusList::add_result() {
  // @@protoc_insertion_point(field_add:PlayerStatusList.result)
  return result_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerStatus >*
PlayerStatusList::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:PlayerStatusList.result)
  return &result_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerStatus >&
PlayerStatusList::result() const {
  // @@protoc_insertion_point(field_list:PlayerStatusList.result)
  return result_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerStatusList_2eproto__INCLUDED
