// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthProof.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AuthProof.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
class AuthProofDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AuthProof>
     _instance;
} _AuthProof_default_instance_;

namespace protobuf_AuthProof_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AuthProof_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AuthProof_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_AuthProof_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthProof::kProofFieldNumber;
const int AuthProof::kSessionIdFieldNumber;
const int AuthProof::kRequiredCapabilitiesFieldNumber;
const int AuthProof::kPlayeridFieldNumber;
const int AuthProof::kOriginalPlayeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthProof::AuthProof()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_AuthProof_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthProof)
}
AuthProof::AuthProof(const AuthProof& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proof_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proof().size() > 0) {
    proof_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proof_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playerid().size() > 0) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  original_playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.original_playerid().size() > 0) {
    original_playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_playerid_);
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&required_capabilities_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(required_capabilities_));
  // @@protoc_insertion_point(copy_constructor:AuthProof)
}

void AuthProof::SharedCtor() {
  proof_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_capabilities_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(required_capabilities_));
  _cached_size_ = 0;
}

AuthProof::~AuthProof() {
  // @@protoc_insertion_point(destructor:AuthProof)
  SharedDtor();
}

void AuthProof::SharedDtor() {
  proof_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthProof& AuthProof::default_instance() {
  protobuf_AuthProof_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthProof* AuthProof::New(::google::protobuf::Arena* arena) const {
  AuthProof* n = new AuthProof;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthProof::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&required_capabilities_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(required_capabilities_));
  _internal_metadata_.Clear();
}

bool AuthProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:AuthProof)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string proof = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proof()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proof().data(), static_cast<int>(this->proof().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AuthProof.proof"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 required_capabilities = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_capabilities_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AuthProof.playerid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string original_playerid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_playerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->original_playerid().data(), static_cast<int>(this->original_playerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AuthProof.original_playerid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthProof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthProof)
  return false;
#undef DO_
}

void AuthProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proof = 1;
  if (this->proof().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proof().data(), static_cast<int>(this->proof().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AuthProof.proof");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->proof(), output);
  }

  // uint32 session_id = 2;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // uint32 required_capabilities = 3;
  if (this->required_capabilities() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->required_capabilities(), output);
  }

  // string playerid = 4;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AuthProof.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->playerid(), output);
  }

  // string original_playerid = 5;
  if (this->original_playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->original_playerid().data(), static_cast<int>(this->original_playerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AuthProof.original_playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->original_playerid(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:AuthProof)
}

size_t AuthProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthProof)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string proof = 1;
  if (this->proof().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proof());
  }

  // string playerid = 4;
  if (this->playerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerid());
  }

  // string original_playerid = 5;
  if (this->original_playerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->original_playerid());
  }

  // uint32 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  // uint32 required_capabilities = 3;
  if (this->required_capabilities() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->required_capabilities());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthProof::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthProof*>(&from));
}

void AuthProof::MergeFrom(const AuthProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proof().size() > 0) {

    proof_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proof_);
  }
  if (from.playerid().size() > 0) {

    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  if (from.original_playerid().size() > 0) {

    original_playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_playerid_);
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.required_capabilities() != 0) {
    set_required_capabilities(from.required_capabilities());
  }
}

void AuthProof::CopyFrom(const AuthProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthProof::IsInitialized() const {
  return true;
}

void AuthProof::Swap(AuthProof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthProof::InternalSwap(AuthProof* other) {
  using std::swap;
  proof_.Swap(&other->proof_);
  playerid_.Swap(&other->playerid_);
  original_playerid_.Swap(&other->original_playerid_);
  swap(session_id_, other->session_id_);
  swap(required_capabilities_, other->required_capabilities_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string AuthProof::GetTypeName() const {
  return "AuthProof";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthProof

// string proof = 1;
void AuthProof::clear_proof() {
  proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthProof::proof() const {
  // @@protoc_insertion_point(field_get:AuthProof.proof)
  return proof_.GetNoArena();
}
void AuthProof::set_proof(const ::std::string& value) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthProof.proof)
}
#if LANG_CXX11
void AuthProof::set_proof(::std::string&& value) {
  
  proof_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthProof.proof)
}
#endif
void AuthProof::set_proof(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthProof.proof)
}
void AuthProof::set_proof(const char* value, size_t size) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthProof.proof)
}
::std::string* AuthProof::mutable_proof() {
  
  // @@protoc_insertion_point(field_mutable:AuthProof.proof)
  return proof_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthProof::release_proof() {
  // @@protoc_insertion_point(field_release:AuthProof.proof)
  
  return proof_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProof::set_allocated_proof(::std::string* proof) {
  if (proof != NULL) {
    
  } else {
    
  }
  proof_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proof);
  // @@protoc_insertion_point(field_set_allocated:AuthProof.proof)
}

// uint32 session_id = 2;
void AuthProof::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 AuthProof::session_id() const {
  // @@protoc_insertion_point(field_get:AuthProof.session_id)
  return session_id_;
}
void AuthProof::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:AuthProof.session_id)
}

// uint32 required_capabilities = 3;
void AuthProof::clear_required_capabilities() {
  required_capabilities_ = 0u;
}
::google::protobuf::uint32 AuthProof::required_capabilities() const {
  // @@protoc_insertion_point(field_get:AuthProof.required_capabilities)
  return required_capabilities_;
}
void AuthProof::set_required_capabilities(::google::protobuf::uint32 value) {
  
  required_capabilities_ = value;
  // @@protoc_insertion_point(field_set:AuthProof.required_capabilities)
}

// string playerid = 4;
void AuthProof::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthProof::playerid() const {
  // @@protoc_insertion_point(field_get:AuthProof.playerid)
  return playerid_.GetNoArena();
}
void AuthProof::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthProof.playerid)
}
#if LANG_CXX11
void AuthProof::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthProof.playerid)
}
#endif
void AuthProof::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthProof.playerid)
}
void AuthProof::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthProof.playerid)
}
::std::string* AuthProof::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:AuthProof.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthProof::release_playerid() {
  // @@protoc_insertion_point(field_release:AuthProof.playerid)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProof::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:AuthProof.playerid)
}

// string original_playerid = 5;
void AuthProof::clear_original_playerid() {
  original_playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthProof::original_playerid() const {
  // @@protoc_insertion_point(field_get:AuthProof.original_playerid)
  return original_playerid_.GetNoArena();
}
void AuthProof::set_original_playerid(const ::std::string& value) {
  
  original_playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthProof.original_playerid)
}
#if LANG_CXX11
void AuthProof::set_original_playerid(::std::string&& value) {
  
  original_playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthProof.original_playerid)
}
#endif
void AuthProof::set_original_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  original_playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthProof.original_playerid)
}
void AuthProof::set_original_playerid(const char* value, size_t size) {
  
  original_playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthProof.original_playerid)
}
::std::string* AuthProof::mutable_original_playerid() {
  
  // @@protoc_insertion_point(field_mutable:AuthProof.original_playerid)
  return original_playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthProof::release_original_playerid() {
  // @@protoc_insertion_point(field_release:AuthProof.original_playerid)
  
  return original_playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProof::set_allocated_original_playerid(::std::string* original_playerid) {
  if (original_playerid != NULL) {
    
  } else {
    
  }
  original_playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_playerid);
  // @@protoc_insertion_point(field_set_allocated:AuthProof.original_playerid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
