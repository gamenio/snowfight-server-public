// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerStatusList.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PlayerStatusList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
class PlayerStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerStatus>
     _instance;
} _PlayerStatus_default_instance_;
class PlayerStatusListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerStatusList>
     _instance;
} _PlayerStatusList_default_instance_;

namespace protobuf_PlayerStatusList_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PlayerStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerStatus_default_instance_);_PlayerStatusList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerStatusList_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_PlayerStatusList_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerStatus::kGuidFieldNumber;
const int PlayerStatus::kNameFieldNumber;
const int PlayerStatus::kLatencyFieldNumber;
const int PlayerStatus::kAttackTotalFieldNumber;
const int PlayerStatus::kViewportWidthFieldNumber;
const int PlayerStatus::kViewportHeightFieldNumber;
const int PlayerStatus::kLangFieldNumber;
const int PlayerStatus::kCountryFieldNumber;
const int PlayerStatus::kGmLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerStatus::PlayerStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PlayerStatusList_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerStatus)
}
PlayerStatus::PlayerStatus(const PlayerStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.country().size() > 0) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gm_level_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(gm_level_));
  // @@protoc_insertion_point(copy_constructor:PlayerStatus)
}

void PlayerStatus::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gm_level_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(gm_level_));
  _cached_size_ = 0;
}

PlayerStatus::~PlayerStatus() {
  // @@protoc_insertion_point(destructor:PlayerStatus)
  SharedDtor();
}

void PlayerStatus::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerStatus& PlayerStatus::default_instance() {
  protobuf_PlayerStatusList_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerStatus* PlayerStatus::New(::google::protobuf::Arena* arena) const {
  PlayerStatus* n = new PlayerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gm_level_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(gm_level_));
  _internal_metadata_.Clear();
}

bool PlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:PlayerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlayerStatus.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 latency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 attack_total = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float viewport_width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &viewport_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float viewport_height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &viewport_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lang = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lang_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country().data(), static_cast<int>(this->country().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlayerStatus.country"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gm_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gm_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerStatus)
  return false;
#undef DO_
}

void PlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 guid = 1;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guid(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlayerStatus.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 latency = 3;
  if (this->latency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->latency(), output);
  }

  // int32 attack_total = 4;
  if (this->attack_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attack_total(), output);
  }

  // float viewport_width = 5;
  if (this->viewport_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->viewport_width(), output);
  }

  // float viewport_height = 6;
  if (this->viewport_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->viewport_height(), output);
  }

  // int32 lang = 7;
  if (this->lang() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lang(), output);
  }

  // string country = 8;
  if (this->country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlayerStatus.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country(), output);
  }

  // uint32 gm_level = 9;
  if (this->gm_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gm_level(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:PlayerStatus)
}

size_t PlayerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerStatus)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string country = 8;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country());
  }

  // uint32 guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->guid());
  }

  // int32 latency = 3;
  if (this->latency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latency());
  }

  // int32 attack_total = 4;
  if (this->attack_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attack_total());
  }

  // float viewport_width = 5;
  if (this->viewport_width() != 0) {
    total_size += 1 + 4;
  }

  // float viewport_height = 6;
  if (this->viewport_height() != 0) {
    total_size += 1 + 4;
  }

  // int32 lang = 7;
  if (this->lang() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lang());
  }

  // uint32 gm_level = 9;
  if (this->gm_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gm_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerStatus*>(&from));
}

void PlayerStatus::MergeFrom(const PlayerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.latency() != 0) {
    set_latency(from.latency());
  }
  if (from.attack_total() != 0) {
    set_attack_total(from.attack_total());
  }
  if (from.viewport_width() != 0) {
    set_viewport_width(from.viewport_width());
  }
  if (from.viewport_height() != 0) {
    set_viewport_height(from.viewport_height());
  }
  if (from.lang() != 0) {
    set_lang(from.lang());
  }
  if (from.gm_level() != 0) {
    set_gm_level(from.gm_level());
  }
}

void PlayerStatus::CopyFrom(const PlayerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatus::IsInitialized() const {
  return true;
}

void PlayerStatus::Swap(PlayerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerStatus::InternalSwap(PlayerStatus* other) {
  using std::swap;
  name_.Swap(&other->name_);
  country_.Swap(&other->country_);
  swap(guid_, other->guid_);
  swap(latency_, other->latency_);
  swap(attack_total_, other->attack_total_);
  swap(viewport_width_, other->viewport_width_);
  swap(viewport_height_, other->viewport_height_);
  swap(lang_, other->lang_);
  swap(gm_level_, other->gm_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerStatus::GetTypeName() const {
  return "PlayerStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerStatus

// uint32 guid = 1;
void PlayerStatus::clear_guid() {
  guid_ = 0u;
}
::google::protobuf::uint32 PlayerStatus::guid() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.guid)
  return guid_;
}
void PlayerStatus::set_guid(::google::protobuf::uint32 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.guid)
}

// string name = 2;
void PlayerStatus::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerStatus::name() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.name)
  return name_.GetNoArena();
}
void PlayerStatus::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerStatus.name)
}
#if LANG_CXX11
void PlayerStatus::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerStatus.name)
}
#endif
void PlayerStatus::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerStatus.name)
}
void PlayerStatus::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerStatus.name)
}
::std::string* PlayerStatus::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:PlayerStatus.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerStatus::release_name() {
  // @@protoc_insertion_point(field_release:PlayerStatus.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerStatus::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PlayerStatus.name)
}

// int32 latency = 3;
void PlayerStatus::clear_latency() {
  latency_ = 0;
}
::google::protobuf::int32 PlayerStatus::latency() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.latency)
  return latency_;
}
void PlayerStatus::set_latency(::google::protobuf::int32 value) {
  
  latency_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.latency)
}

// int32 attack_total = 4;
void PlayerStatus::clear_attack_total() {
  attack_total_ = 0;
}
::google::protobuf::int32 PlayerStatus::attack_total() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.attack_total)
  return attack_total_;
}
void PlayerStatus::set_attack_total(::google::protobuf::int32 value) {
  
  attack_total_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.attack_total)
}

// float viewport_width = 5;
void PlayerStatus::clear_viewport_width() {
  viewport_width_ = 0;
}
float PlayerStatus::viewport_width() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.viewport_width)
  return viewport_width_;
}
void PlayerStatus::set_viewport_width(float value) {
  
  viewport_width_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.viewport_width)
}

// float viewport_height = 6;
void PlayerStatus::clear_viewport_height() {
  viewport_height_ = 0;
}
float PlayerStatus::viewport_height() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.viewport_height)
  return viewport_height_;
}
void PlayerStatus::set_viewport_height(float value) {
  
  viewport_height_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.viewport_height)
}

// int32 lang = 7;
void PlayerStatus::clear_lang() {
  lang_ = 0;
}
::google::protobuf::int32 PlayerStatus::lang() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.lang)
  return lang_;
}
void PlayerStatus::set_lang(::google::protobuf::int32 value) {
  
  lang_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.lang)
}

// string country = 8;
void PlayerStatus::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerStatus::country() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.country)
  return country_.GetNoArena();
}
void PlayerStatus::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerStatus.country)
}
#if LANG_CXX11
void PlayerStatus::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerStatus.country)
}
#endif
void PlayerStatus::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerStatus.country)
}
void PlayerStatus::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerStatus.country)
}
::std::string* PlayerStatus::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:PlayerStatus.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerStatus::release_country() {
  // @@protoc_insertion_point(field_release:PlayerStatus.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerStatus::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:PlayerStatus.country)
}

// uint32 gm_level = 9;
void PlayerStatus::clear_gm_level() {
  gm_level_ = 0u;
}
::google::protobuf::uint32 PlayerStatus::gm_level() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.gm_level)
  return gm_level_;
}
void PlayerStatus::set_gm_level(::google::protobuf::uint32 value) {
  
  gm_level_ = value;
  // @@protoc_insertion_point(field_set:PlayerStatus.gm_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerStatusList::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerStatusList::PlayerStatusList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_PlayerStatusList_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerStatusList)
}
PlayerStatusList::PlayerStatusList(const PlayerStatusList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      result_(from.result_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlayerStatusList)
}

void PlayerStatusList::SharedCtor() {
  _cached_size_ = 0;
}

PlayerStatusList::~PlayerStatusList() {
  // @@protoc_insertion_point(destructor:PlayerStatusList)
  SharedDtor();
}

void PlayerStatusList::SharedDtor() {
}

void PlayerStatusList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerStatusList& PlayerStatusList::default_instance() {
  protobuf_PlayerStatusList_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerStatusList* PlayerStatusList::New(::google::protobuf::Arena* arena) const {
  PlayerStatusList* n = new PlayerStatusList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerStatusList::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerStatusList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerStatusList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:PlayerStatusList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerStatus result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerStatusList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerStatusList)
  return false;
#undef DO_
}

void PlayerStatusList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerStatusList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerStatus result = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->result(static_cast<int>(i)), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:PlayerStatusList)
}

size_t PlayerStatusList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerStatusList)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .PlayerStatus result = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->result_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStatusList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerStatusList*>(&from));
}

void PlayerStatusList::MergeFrom(const PlayerStatusList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerStatusList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
}

void PlayerStatusList::CopyFrom(const PlayerStatusList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerStatusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatusList::IsInitialized() const {
  return true;
}

void PlayerStatusList::Swap(PlayerStatusList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerStatusList::InternalSwap(PlayerStatusList* other) {
  using std::swap;
  result_.InternalSwap(&other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerStatusList::GetTypeName() const {
  return "PlayerStatusList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerStatusList

// repeated .PlayerStatus result = 3;
int PlayerStatusList::result_size() const {
  return result_.size();
}
void PlayerStatusList::clear_result() {
  result_.Clear();
}
const ::PlayerStatus& PlayerStatusList::result(int index) const {
  // @@protoc_insertion_point(field_get:PlayerStatusList.result)
  return result_.Get(index);
}
::PlayerStatus* PlayerStatusList::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:PlayerStatusList.result)
  return result_.Mutable(index);
}
::PlayerStatus* PlayerStatusList::add_result() {
  // @@protoc_insertion_point(field_add:PlayerStatusList.result)
  return result_.Add();
}
::google::protobuf::RepeatedPtrField< ::PlayerStatus >*
PlayerStatusList::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:PlayerStatusList.result)
  return &result_;
}
const ::google::protobuf::RepeatedPtrField< ::PlayerStatus >&
PlayerStatusList::result() const {
  // @@protoc_insertion_point(field_list:PlayerStatusList.result)
  return result_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
