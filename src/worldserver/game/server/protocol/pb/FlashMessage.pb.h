// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlashMessage.proto

#ifndef PROTOBUF_FlashMessage_2eproto__INCLUDED
#define PROTOBUF_FlashMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
class FlashMessage;
class FlashMessageDefaultTypeInternal;
extern FlashMessageDefaultTypeInternal _FlashMessage_default_instance_;

namespace protobuf_FlashMessage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_FlashMessage_2eproto

enum FlashMessage_Severity {
  FlashMessage_Severity_INFO = 0,
  FlashMessage_Severity_NOTICE = 1,
  FlashMessage_Severity_ALERT = 2,
  FlashMessage_Severity_FlashMessage_Severity_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FlashMessage_Severity_FlashMessage_Severity_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FlashMessage_Severity_IsValid(int value);
const FlashMessage_Severity FlashMessage_Severity_Severity_MIN = FlashMessage_Severity_INFO;
const FlashMessage_Severity FlashMessage_Severity_Severity_MAX = FlashMessage_Severity_ALERT;
const int FlashMessage_Severity_Severity_ARRAYSIZE = FlashMessage_Severity_Severity_MAX + 1;

// ===================================================================

class FlashMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:FlashMessage) */ {
 public:
  FlashMessage();
  virtual ~FlashMessage();

  FlashMessage(const FlashMessage& from);

  inline FlashMessage& operator=(const FlashMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlashMessage(FlashMessage&& from) noexcept
    : FlashMessage() {
    *this = ::std::move(from);
  }

  inline FlashMessage& operator=(FlashMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const FlashMessage& default_instance();

  static inline const FlashMessage* internal_default_instance() {
    return reinterpret_cast<const FlashMessage*>(
               &_FlashMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FlashMessage* other);
  friend void swap(FlashMessage& a, FlashMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlashMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  FlashMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FlashMessage& from);
  void MergeFrom(const FlashMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlashMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FlashMessage_Severity Severity;
  static const Severity INFO =
    FlashMessage_Severity_INFO;
  static const Severity NOTICE =
    FlashMessage_Severity_NOTICE;
  static const Severity ALERT =
    FlashMessage_Severity_ALERT;
  static inline bool Severity_IsValid(int value) {
    return FlashMessage_Severity_IsValid(value);
  }
  static const Severity Severity_MIN =
    FlashMessage_Severity_Severity_MIN;
  static const Severity Severity_MAX =
    FlashMessage_Severity_Severity_MAX;
  static const int Severity_ARRAYSIZE =
    FlashMessage_Severity_Severity_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .FlashMessage.Severity severity = 1;
  void clear_severity();
  static const int kSeverityFieldNumber = 1;
  ::FlashMessage_Severity severity() const;
  void set_severity(::FlashMessage_Severity value);

  // @@protoc_insertion_point(class_scope:FlashMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int severity_;
  mutable int _cached_size_;
  friend struct protobuf_FlashMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlashMessage

// .FlashMessage.Severity severity = 1;
inline void FlashMessage::clear_severity() {
  severity_ = 0;
}
inline ::FlashMessage_Severity FlashMessage::severity() const {
  // @@protoc_insertion_point(field_get:FlashMessage.severity)
  return static_cast< ::FlashMessage_Severity >(severity_);
}
inline void FlashMessage::set_severity(::FlashMessage_Severity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:FlashMessage.severity)
}

// string message = 2;
inline void FlashMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlashMessage::message() const {
  // @@protoc_insertion_point(field_get:FlashMessage.message)
  return message_.GetNoArena();
}
inline void FlashMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FlashMessage.message)
}
#if LANG_CXX11
inline void FlashMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlashMessage.message)
}
#endif
inline void FlashMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlashMessage.message)
}
inline void FlashMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlashMessage.message)
}
inline ::std::string* FlashMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:FlashMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlashMessage::release_message() {
  // @@protoc_insertion_point(field_release:FlashMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlashMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:FlashMessage.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::FlashMessage_Severity> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FlashMessage_2eproto__INCLUDED
