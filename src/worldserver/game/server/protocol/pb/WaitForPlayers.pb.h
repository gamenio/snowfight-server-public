// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WaitForPlayers.proto

#ifndef PROTOBUF_WaitForPlayers_2eproto__INCLUDED
#define PROTOBUF_WaitForPlayers_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
class WaitForPlayers;
class WaitForPlayersDefaultTypeInternal;
extern WaitForPlayersDefaultTypeInternal _WaitForPlayers_default_instance_;

namespace protobuf_WaitForPlayers_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_WaitForPlayers_2eproto

// ===================================================================

class WaitForPlayers : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:WaitForPlayers) */ {
 public:
  WaitForPlayers();
  virtual ~WaitForPlayers();

  WaitForPlayers(const WaitForPlayers& from);

  inline WaitForPlayers& operator=(const WaitForPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WaitForPlayers(WaitForPlayers&& from) noexcept
    : WaitForPlayers() {
    *this = ::std::move(from);
  }

  inline WaitForPlayers& operator=(WaitForPlayers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const WaitForPlayers& default_instance();

  static inline const WaitForPlayers* internal_default_instance() {
    return reinterpret_cast<const WaitForPlayers*>(
               &_WaitForPlayers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(WaitForPlayers* other);
  friend void swap(WaitForPlayers& a, WaitForPlayers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaitForPlayers* New() const PROTOBUF_FINAL { return New(NULL); }

  WaitForPlayers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const WaitForPlayers& from);
  void MergeFrom(const WaitForPlayers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WaitForPlayers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 start_time = 1;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  ::google::protobuf::int32 start_time() const;
  void set_start_time(::google::protobuf::int32 value);

  // int32 duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WaitForPlayers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 start_time_;
  ::google::protobuf::int32 duration_;
  mutable int _cached_size_;
  friend struct protobuf_WaitForPlayers_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WaitForPlayers

// int32 start_time = 1;
inline void WaitForPlayers::clear_start_time() {
  start_time_ = 0;
}
inline ::google::protobuf::int32 WaitForPlayers::start_time() const {
  // @@protoc_insertion_point(field_get:WaitForPlayers.start_time)
  return start_time_;
}
inline void WaitForPlayers::set_start_time(::google::protobuf::int32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:WaitForPlayers.start_time)
}

// int32 duration = 2;
inline void WaitForPlayers::clear_duration() {
  duration_ = 0;
}
inline ::google::protobuf::int32 WaitForPlayers::duration() const {
  // @@protoc_insertion_point(field_get:WaitForPlayers.duration)
  return duration_;
}
inline void WaitForPlayers::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:WaitForPlayers.duration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WaitForPlayers_2eproto__INCLUDED
