// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogonChallenge.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LogonChallenge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
class LogonChallengeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LogonChallenge>
     _instance;
} _LogonChallenge_default_instance_;

namespace protobuf_LogonChallenge_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LogonChallenge_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LogonChallenge_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_LogonChallenge_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogonChallenge::kVersionFieldNumber;
const int LogonChallenge::kBuildFieldNumber;
const int LogonChallenge::kDeviceModelFieldNumber;
const int LogonChallenge::kOsFieldNumber;
const int LogonChallenge::kLangFieldNumber;
const int LogonChallenge::kTimezoneFieldNumber;
const int LogonChallenge::kPlatformFieldNumber;
const int LogonChallenge::kCountryFieldNumber;
const int LogonChallenge::kRequiredCapabilitiesFieldNumber;
const int LogonChallenge::kPlayeridFieldNumber;
const int LogonChallenge::kOriginalPlayeridFieldNumber;
const int LogonChallenge::kNetworkTypeFieldNumber;
const int LogonChallenge::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogonChallenge::LogonChallenge()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LogonChallenge_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogonChallenge)
}
LogonChallenge::LogonChallenge(const LogonChallenge& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_model().size() > 0) {
    device_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_model_);
  }
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.os().size() > 0) {
    os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
  }
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lang().size() > 0) {
    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.country().size() > 0) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playerid().size() > 0) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  original_playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.original_playerid().size() > 0) {
    original_playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_playerid_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:LogonChallenge)
}

void LogonChallenge::SharedCtor() {
  device_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(channel_id_));
  _cached_size_ = 0;
}

LogonChallenge::~LogonChallenge() {
  // @@protoc_insertion_point(destructor:LogonChallenge)
  SharedDtor();
}

void LogonChallenge::SharedDtor() {
  device_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogonChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogonChallenge& LogonChallenge::default_instance() {
  protobuf_LogonChallenge_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogonChallenge* LogonChallenge::New(::google::protobuf::Arena* arena) const {
  LogonChallenge* n = new LogonChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogonChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:LogonChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(channel_id_));
  _internal_metadata_.Clear();
}

bool LogonChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:LogonChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 build = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &build_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_model = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_model().data(), static_cast<int>(this->device_model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LogonChallenge.device_model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string os = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->os().data(), static_cast<int>(this->os().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LogonChallenge.os"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lang = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), static_cast<int>(this->lang().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LogonChallenge.lang"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timezone = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 platform = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country().data(), static_cast<int>(this->country().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LogonChallenge.country"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 required_capabilities = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_capabilities_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LogonChallenge.playerid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string original_playerid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_playerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->original_playerid().data(), static_cast<int>(this->original_playerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LogonChallenge.original_playerid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 network_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogonChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogonChallenge)
  return false;
#undef DO_
}

void LogonChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogonChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // uint32 build = 2;
  if (this->build() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->build(), output);
  }

  // string device_model = 3;
  if (this->device_model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_model().data(), static_cast<int>(this->device_model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogonChallenge.device_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_model(), output);
  }

  // string os = 4;
  if (this->os().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os().data(), static_cast<int>(this->os().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogonChallenge.os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->os(), output);
  }

  // string lang = 5;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), static_cast<int>(this->lang().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogonChallenge.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lang(), output);
  }

  // int32 timezone = 6;
  if (this->timezone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timezone(), output);
  }

  // uint32 platform = 7;
  if (this->platform() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platform(), output);
  }

  // string country = 8;
  if (this->country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogonChallenge.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country(), output);
  }

  // uint32 required_capabilities = 9;
  if (this->required_capabilities() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->required_capabilities(), output);
  }

  // string playerid = 10;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogonChallenge.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->playerid(), output);
  }

  // string original_playerid = 11;
  if (this->original_playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->original_playerid().data(), static_cast<int>(this->original_playerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LogonChallenge.original_playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->original_playerid(), output);
  }

  // int32 network_type = 12;
  if (this->network_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->network_type(), output);
  }

  // uint32 channel_id = 13;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->channel_id(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:LogonChallenge)
}

size_t LogonChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogonChallenge)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string device_model = 3;
  if (this->device_model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_model());
  }

  // string os = 4;
  if (this->os().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os());
  }

  // string lang = 5;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // string country = 8;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country());
  }

  // string playerid = 10;
  if (this->playerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerid());
  }

  // string original_playerid = 11;
  if (this->original_playerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->original_playerid());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // uint32 build = 2;
  if (this->build() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->build());
  }

  // int32 timezone = 6;
  if (this->timezone() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timezone());
  }

  // uint32 platform = 7;
  if (this->platform() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->platform());
  }

  // uint32 required_capabilities = 9;
  if (this->required_capabilities() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->required_capabilities());
  }

  // int32 network_type = 12;
  if (this->network_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->network_type());
  }

  // uint32 channel_id = 13;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogonChallenge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogonChallenge*>(&from));
}

void LogonChallenge::MergeFrom(const LogonChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogonChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_model().size() > 0) {

    device_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_model_);
  }
  if (from.os().size() > 0) {

    os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.playerid().size() > 0) {

    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  if (from.original_playerid().size() > 0) {

    original_playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_playerid_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.build() != 0) {
    set_build(from.build());
  }
  if (from.timezone() != 0) {
    set_timezone(from.timezone());
  }
  if (from.platform() != 0) {
    set_platform(from.platform());
  }
  if (from.required_capabilities() != 0) {
    set_required_capabilities(from.required_capabilities());
  }
  if (from.network_type() != 0) {
    set_network_type(from.network_type());
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void LogonChallenge::CopyFrom(const LogonChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogonChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogonChallenge::IsInitialized() const {
  return true;
}

void LogonChallenge::Swap(LogonChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogonChallenge::InternalSwap(LogonChallenge* other) {
  using std::swap;
  device_model_.Swap(&other->device_model_);
  os_.Swap(&other->os_);
  lang_.Swap(&other->lang_);
  country_.Swap(&other->country_);
  playerid_.Swap(&other->playerid_);
  original_playerid_.Swap(&other->original_playerid_);
  swap(version_, other->version_);
  swap(build_, other->build_);
  swap(timezone_, other->timezone_);
  swap(platform_, other->platform_);
  swap(required_capabilities_, other->required_capabilities_);
  swap(network_type_, other->network_type_);
  swap(channel_id_, other->channel_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string LogonChallenge::GetTypeName() const {
  return "LogonChallenge";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogonChallenge

// uint32 version = 1;
void LogonChallenge::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 LogonChallenge::version() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.version)
  return version_;
}
void LogonChallenge::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.version)
}

// uint32 build = 2;
void LogonChallenge::clear_build() {
  build_ = 0u;
}
::google::protobuf::uint32 LogonChallenge::build() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.build)
  return build_;
}
void LogonChallenge::set_build(::google::protobuf::uint32 value) {
  
  build_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.build)
}

// string device_model = 3;
void LogonChallenge::clear_device_model() {
  device_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogonChallenge::device_model() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.device_model)
  return device_model_.GetNoArena();
}
void LogonChallenge::set_device_model(const ::std::string& value) {
  
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogonChallenge.device_model)
}
#if LANG_CXX11
void LogonChallenge::set_device_model(::std::string&& value) {
  
  device_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogonChallenge.device_model)
}
#endif
void LogonChallenge::set_device_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogonChallenge.device_model)
}
void LogonChallenge::set_device_model(const char* value, size_t size) {
  
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogonChallenge.device_model)
}
::std::string* LogonChallenge::mutable_device_model() {
  
  // @@protoc_insertion_point(field_mutable:LogonChallenge.device_model)
  return device_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogonChallenge::release_device_model() {
  // @@protoc_insertion_point(field_release:LogonChallenge.device_model)
  
  return device_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogonChallenge::set_allocated_device_model(::std::string* device_model) {
  if (device_model != NULL) {
    
  } else {
    
  }
  device_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_model);
  // @@protoc_insertion_point(field_set_allocated:LogonChallenge.device_model)
}

// string os = 4;
void LogonChallenge::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogonChallenge::os() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.os)
  return os_.GetNoArena();
}
void LogonChallenge::set_os(const ::std::string& value) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogonChallenge.os)
}
#if LANG_CXX11
void LogonChallenge::set_os(::std::string&& value) {
  
  os_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogonChallenge.os)
}
#endif
void LogonChallenge::set_os(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogonChallenge.os)
}
void LogonChallenge::set_os(const char* value, size_t size) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogonChallenge.os)
}
::std::string* LogonChallenge::mutable_os() {
  
  // @@protoc_insertion_point(field_mutable:LogonChallenge.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogonChallenge::release_os() {
  // @@protoc_insertion_point(field_release:LogonChallenge.os)
  
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogonChallenge::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    
  } else {
    
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:LogonChallenge.os)
}

// string lang = 5;
void LogonChallenge::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogonChallenge::lang() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.lang)
  return lang_.GetNoArena();
}
void LogonChallenge::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogonChallenge.lang)
}
#if LANG_CXX11
void LogonChallenge::set_lang(::std::string&& value) {
  
  lang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogonChallenge.lang)
}
#endif
void LogonChallenge::set_lang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogonChallenge.lang)
}
void LogonChallenge::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogonChallenge.lang)
}
::std::string* LogonChallenge::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:LogonChallenge.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogonChallenge::release_lang() {
  // @@protoc_insertion_point(field_release:LogonChallenge.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogonChallenge::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:LogonChallenge.lang)
}

// int32 timezone = 6;
void LogonChallenge::clear_timezone() {
  timezone_ = 0;
}
::google::protobuf::int32 LogonChallenge::timezone() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.timezone)
  return timezone_;
}
void LogonChallenge::set_timezone(::google::protobuf::int32 value) {
  
  timezone_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.timezone)
}

// uint32 platform = 7;
void LogonChallenge::clear_platform() {
  platform_ = 0u;
}
::google::protobuf::uint32 LogonChallenge::platform() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.platform)
  return platform_;
}
void LogonChallenge::set_platform(::google::protobuf::uint32 value) {
  
  platform_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.platform)
}

// string country = 8;
void LogonChallenge::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogonChallenge::country() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.country)
  return country_.GetNoArena();
}
void LogonChallenge::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogonChallenge.country)
}
#if LANG_CXX11
void LogonChallenge::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogonChallenge.country)
}
#endif
void LogonChallenge::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogonChallenge.country)
}
void LogonChallenge::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogonChallenge.country)
}
::std::string* LogonChallenge::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:LogonChallenge.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogonChallenge::release_country() {
  // @@protoc_insertion_point(field_release:LogonChallenge.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogonChallenge::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:LogonChallenge.country)
}

// uint32 required_capabilities = 9;
void LogonChallenge::clear_required_capabilities() {
  required_capabilities_ = 0u;
}
::google::protobuf::uint32 LogonChallenge::required_capabilities() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.required_capabilities)
  return required_capabilities_;
}
void LogonChallenge::set_required_capabilities(::google::protobuf::uint32 value) {
  
  required_capabilities_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.required_capabilities)
}

// string playerid = 10;
void LogonChallenge::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogonChallenge::playerid() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.playerid)
  return playerid_.GetNoArena();
}
void LogonChallenge::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogonChallenge.playerid)
}
#if LANG_CXX11
void LogonChallenge::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogonChallenge.playerid)
}
#endif
void LogonChallenge::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogonChallenge.playerid)
}
void LogonChallenge::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogonChallenge.playerid)
}
::std::string* LogonChallenge::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:LogonChallenge.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogonChallenge::release_playerid() {
  // @@protoc_insertion_point(field_release:LogonChallenge.playerid)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogonChallenge::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:LogonChallenge.playerid)
}

// string original_playerid = 11;
void LogonChallenge::clear_original_playerid() {
  original_playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogonChallenge::original_playerid() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.original_playerid)
  return original_playerid_.GetNoArena();
}
void LogonChallenge::set_original_playerid(const ::std::string& value) {
  
  original_playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogonChallenge.original_playerid)
}
#if LANG_CXX11
void LogonChallenge::set_original_playerid(::std::string&& value) {
  
  original_playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogonChallenge.original_playerid)
}
#endif
void LogonChallenge::set_original_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  original_playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogonChallenge.original_playerid)
}
void LogonChallenge::set_original_playerid(const char* value, size_t size) {
  
  original_playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogonChallenge.original_playerid)
}
::std::string* LogonChallenge::mutable_original_playerid() {
  
  // @@protoc_insertion_point(field_mutable:LogonChallenge.original_playerid)
  return original_playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogonChallenge::release_original_playerid() {
  // @@protoc_insertion_point(field_release:LogonChallenge.original_playerid)
  
  return original_playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogonChallenge::set_allocated_original_playerid(::std::string* original_playerid) {
  if (original_playerid != NULL) {
    
  } else {
    
  }
  original_playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_playerid);
  // @@protoc_insertion_point(field_set_allocated:LogonChallenge.original_playerid)
}

// int32 network_type = 12;
void LogonChallenge::clear_network_type() {
  network_type_ = 0;
}
::google::protobuf::int32 LogonChallenge::network_type() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.network_type)
  return network_type_;
}
void LogonChallenge::set_network_type(::google::protobuf::int32 value) {
  
  network_type_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.network_type)
}

// uint32 channel_id = 13;
void LogonChallenge::clear_channel_id() {
  channel_id_ = 0u;
}
::google::protobuf::uint32 LogonChallenge::channel_id() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.channel_id)
  return channel_id_;
}
void LogonChallenge::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.channel_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
