// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogonChallenge.proto

#ifndef PROTOBUF_LogonChallenge_2eproto__INCLUDED
#define PROTOBUF_LogonChallenge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
class LogonChallenge;
class LogonChallengeDefaultTypeInternal;
extern LogonChallengeDefaultTypeInternal _LogonChallenge_default_instance_;

namespace protobuf_LogonChallenge_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_LogonChallenge_2eproto

// ===================================================================

class LogonChallenge : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:LogonChallenge) */ {
 public:
  LogonChallenge();
  virtual ~LogonChallenge();

  LogonChallenge(const LogonChallenge& from);

  inline LogonChallenge& operator=(const LogonChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogonChallenge(LogonChallenge&& from) noexcept
    : LogonChallenge() {
    *this = ::std::move(from);
  }

  inline LogonChallenge& operator=(LogonChallenge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LogonChallenge& default_instance();

  static inline const LogonChallenge* internal_default_instance() {
    return reinterpret_cast<const LogonChallenge*>(
               &_LogonChallenge_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LogonChallenge* other);
  friend void swap(LogonChallenge& a, LogonChallenge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogonChallenge* New() const PROTOBUF_FINAL { return New(NULL); }

  LogonChallenge* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LogonChallenge& from);
  void MergeFrom(const LogonChallenge& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogonChallenge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string device_model = 3;
  void clear_device_model();
  static const int kDeviceModelFieldNumber = 3;
  const ::std::string& device_model() const;
  void set_device_model(const ::std::string& value);
  #if LANG_CXX11
  void set_device_model(::std::string&& value);
  #endif
  void set_device_model(const char* value);
  void set_device_model(const char* value, size_t size);
  ::std::string* mutable_device_model();
  ::std::string* release_device_model();
  void set_allocated_device_model(::std::string* device_model);

  // string os = 4;
  void clear_os();
  static const int kOsFieldNumber = 4;
  const ::std::string& os() const;
  void set_os(const ::std::string& value);
  #if LANG_CXX11
  void set_os(::std::string&& value);
  #endif
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  ::std::string* mutable_os();
  ::std::string* release_os();
  void set_allocated_os(::std::string* os);

  // string lang = 5;
  void clear_lang();
  static const int kLangFieldNumber = 5;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  #if LANG_CXX11
  void set_lang(::std::string&& value);
  #endif
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // string country = 8;
  void clear_country();
  static const int kCountryFieldNumber = 8;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // string playerid = 10;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 10;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string original_playerid = 11;
  void clear_original_playerid();
  static const int kOriginalPlayeridFieldNumber = 11;
  const ::std::string& original_playerid() const;
  void set_original_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_original_playerid(::std::string&& value);
  #endif
  void set_original_playerid(const char* value);
  void set_original_playerid(const char* value, size_t size);
  ::std::string* mutable_original_playerid();
  ::std::string* release_original_playerid();
  void set_allocated_original_playerid(::std::string* original_playerid);

  // uint32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 build = 2;
  void clear_build();
  static const int kBuildFieldNumber = 2;
  ::google::protobuf::uint32 build() const;
  void set_build(::google::protobuf::uint32 value);

  // int32 timezone = 6;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 6;
  ::google::protobuf::int32 timezone() const;
  void set_timezone(::google::protobuf::int32 value);

  // uint32 platform = 7;
  void clear_platform();
  static const int kPlatformFieldNumber = 7;
  ::google::protobuf::uint32 platform() const;
  void set_platform(::google::protobuf::uint32 value);

  // uint32 required_capabilities = 9;
  void clear_required_capabilities();
  static const int kRequiredCapabilitiesFieldNumber = 9;
  ::google::protobuf::uint32 required_capabilities() const;
  void set_required_capabilities(::google::protobuf::uint32 value);

  // int32 network_type = 12;
  void clear_network_type();
  static const int kNetworkTypeFieldNumber = 12;
  ::google::protobuf::int32 network_type() const;
  void set_network_type(::google::protobuf::int32 value);

  // uint32 channel_id = 13;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 13;
  ::google::protobuf::uint32 channel_id() const;
  void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LogonChallenge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr device_model_;
  ::google::protobuf::internal::ArenaStringPtr os_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr original_playerid_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 build_;
  ::google::protobuf::int32 timezone_;
  ::google::protobuf::uint32 platform_;
  ::google::protobuf::uint32 required_capabilities_;
  ::google::protobuf::int32 network_type_;
  ::google::protobuf::uint32 channel_id_;
  mutable int _cached_size_;
  friend struct protobuf_LogonChallenge_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogonChallenge

// uint32 version = 1;
inline void LogonChallenge::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 LogonChallenge::version() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.version)
  return version_;
}
inline void LogonChallenge::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.version)
}

// uint32 build = 2;
inline void LogonChallenge::clear_build() {
  build_ = 0u;
}
inline ::google::protobuf::uint32 LogonChallenge::build() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.build)
  return build_;
}
inline void LogonChallenge::set_build(::google::protobuf::uint32 value) {
  
  build_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.build)
}

// string device_model = 3;
inline void LogonChallenge::clear_device_model() {
  device_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogonChallenge::device_model() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.device_model)
  return device_model_.GetNoArena();
}
inline void LogonChallenge::set_device_model(const ::std::string& value) {
  
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogonChallenge.device_model)
}
#if LANG_CXX11
inline void LogonChallenge::set_device_model(::std::string&& value) {
  
  device_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogonChallenge.device_model)
}
#endif
inline void LogonChallenge::set_device_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogonChallenge.device_model)
}
inline void LogonChallenge::set_device_model(const char* value, size_t size) {
  
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogonChallenge.device_model)
}
inline ::std::string* LogonChallenge::mutable_device_model() {
  
  // @@protoc_insertion_point(field_mutable:LogonChallenge.device_model)
  return device_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogonChallenge::release_device_model() {
  // @@protoc_insertion_point(field_release:LogonChallenge.device_model)
  
  return device_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogonChallenge::set_allocated_device_model(::std::string* device_model) {
  if (device_model != NULL) {
    
  } else {
    
  }
  device_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_model);
  // @@protoc_insertion_point(field_set_allocated:LogonChallenge.device_model)
}

// string os = 4;
inline void LogonChallenge::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogonChallenge::os() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.os)
  return os_.GetNoArena();
}
inline void LogonChallenge::set_os(const ::std::string& value) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogonChallenge.os)
}
#if LANG_CXX11
inline void LogonChallenge::set_os(::std::string&& value) {
  
  os_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogonChallenge.os)
}
#endif
inline void LogonChallenge::set_os(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogonChallenge.os)
}
inline void LogonChallenge::set_os(const char* value, size_t size) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogonChallenge.os)
}
inline ::std::string* LogonChallenge::mutable_os() {
  
  // @@protoc_insertion_point(field_mutable:LogonChallenge.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogonChallenge::release_os() {
  // @@protoc_insertion_point(field_release:LogonChallenge.os)
  
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogonChallenge::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    
  } else {
    
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:LogonChallenge.os)
}

// string lang = 5;
inline void LogonChallenge::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogonChallenge::lang() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.lang)
  return lang_.GetNoArena();
}
inline void LogonChallenge::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogonChallenge.lang)
}
#if LANG_CXX11
inline void LogonChallenge::set_lang(::std::string&& value) {
  
  lang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogonChallenge.lang)
}
#endif
inline void LogonChallenge::set_lang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogonChallenge.lang)
}
inline void LogonChallenge::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogonChallenge.lang)
}
inline ::std::string* LogonChallenge::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:LogonChallenge.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogonChallenge::release_lang() {
  // @@protoc_insertion_point(field_release:LogonChallenge.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogonChallenge::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:LogonChallenge.lang)
}

// int32 timezone = 6;
inline void LogonChallenge::clear_timezone() {
  timezone_ = 0;
}
inline ::google::protobuf::int32 LogonChallenge::timezone() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.timezone)
  return timezone_;
}
inline void LogonChallenge::set_timezone(::google::protobuf::int32 value) {
  
  timezone_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.timezone)
}

// uint32 platform = 7;
inline void LogonChallenge::clear_platform() {
  platform_ = 0u;
}
inline ::google::protobuf::uint32 LogonChallenge::platform() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.platform)
  return platform_;
}
inline void LogonChallenge::set_platform(::google::protobuf::uint32 value) {
  
  platform_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.platform)
}

// string country = 8;
inline void LogonChallenge::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogonChallenge::country() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.country)
  return country_.GetNoArena();
}
inline void LogonChallenge::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogonChallenge.country)
}
#if LANG_CXX11
inline void LogonChallenge::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogonChallenge.country)
}
#endif
inline void LogonChallenge::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogonChallenge.country)
}
inline void LogonChallenge::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogonChallenge.country)
}
inline ::std::string* LogonChallenge::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:LogonChallenge.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogonChallenge::release_country() {
  // @@protoc_insertion_point(field_release:LogonChallenge.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogonChallenge::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:LogonChallenge.country)
}

// uint32 required_capabilities = 9;
inline void LogonChallenge::clear_required_capabilities() {
  required_capabilities_ = 0u;
}
inline ::google::protobuf::uint32 LogonChallenge::required_capabilities() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.required_capabilities)
  return required_capabilities_;
}
inline void LogonChallenge::set_required_capabilities(::google::protobuf::uint32 value) {
  
  required_capabilities_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.required_capabilities)
}

// string playerid = 10;
inline void LogonChallenge::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogonChallenge::playerid() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.playerid)
  return playerid_.GetNoArena();
}
inline void LogonChallenge::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogonChallenge.playerid)
}
#if LANG_CXX11
inline void LogonChallenge::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogonChallenge.playerid)
}
#endif
inline void LogonChallenge::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogonChallenge.playerid)
}
inline void LogonChallenge::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogonChallenge.playerid)
}
inline ::std::string* LogonChallenge::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:LogonChallenge.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogonChallenge::release_playerid() {
  // @@protoc_insertion_point(field_release:LogonChallenge.playerid)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogonChallenge::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:LogonChallenge.playerid)
}

// string original_playerid = 11;
inline void LogonChallenge::clear_original_playerid() {
  original_playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogonChallenge::original_playerid() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.original_playerid)
  return original_playerid_.GetNoArena();
}
inline void LogonChallenge::set_original_playerid(const ::std::string& value) {
  
  original_playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogonChallenge.original_playerid)
}
#if LANG_CXX11
inline void LogonChallenge::set_original_playerid(::std::string&& value) {
  
  original_playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogonChallenge.original_playerid)
}
#endif
inline void LogonChallenge::set_original_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  original_playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogonChallenge.original_playerid)
}
inline void LogonChallenge::set_original_playerid(const char* value, size_t size) {
  
  original_playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogonChallenge.original_playerid)
}
inline ::std::string* LogonChallenge::mutable_original_playerid() {
  
  // @@protoc_insertion_point(field_mutable:LogonChallenge.original_playerid)
  return original_playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogonChallenge::release_original_playerid() {
  // @@protoc_insertion_point(field_release:LogonChallenge.original_playerid)
  
  return original_playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogonChallenge::set_allocated_original_playerid(::std::string* original_playerid) {
  if (original_playerid != NULL) {
    
  } else {
    
  }
  original_playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_playerid);
  // @@protoc_insertion_point(field_set_allocated:LogonChallenge.original_playerid)
}

// int32 network_type = 12;
inline void LogonChallenge::clear_network_type() {
  network_type_ = 0;
}
inline ::google::protobuf::int32 LogonChallenge::network_type() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.network_type)
  return network_type_;
}
inline void LogonChallenge::set_network_type(::google::protobuf::int32 value) {
  
  network_type_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.network_type)
}

// uint32 channel_id = 13;
inline void LogonChallenge::clear_channel_id() {
  channel_id_ = 0u;
}
inline ::google::protobuf::uint32 LogonChallenge::channel_id() const {
  // @@protoc_insertion_point(field_get:LogonChallenge.channel_id)
  return channel_id_;
}
inline void LogonChallenge::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:LogonChallenge.channel_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LogonChallenge_2eproto__INCLUDED
